#include "../include/Pixterm.h"
#include <thread>

unsigned long long int prev = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
unsigned long long int now = 0;
float dt = 0;

int main() {

	PixTerm::Terminal term;

	std::this_thread::sleep_for(std::chrono::milliseconds(2));
	now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();

	dt = now - prev;
	dt /= 1000;
	prev = now;

	term.SetTitle(std::to_string(1/dt));

		glm::mat4 model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(-1.0f,0.0f,0.0f));
		model = glm::rotate(model, glm::radians(i), glm::vec3(1.0f, 1.0f, 1.0f));

		glm::mat4 model2 = glm::mat4(1.0f);
		model2 = glm::translate(model2, glm::vec3(1.0f, 0.0f, 0.0f));
		model2 = glm::rotate(model2, glm::radians(i), glm::vec3(0.0f, 1.0f, 1.0f));

		glm::mat4 projection = glm::mat4(1.0f);
		projection = glm::perspective(glm::radians(90.0f), term.width/(float)term.height, 0.01f, 100.0f);
//
		glm::mat4 view = glm::mat4(1.0f);
		view = glm::lookAt(camPos, camPos + glm::vec3(0.0f,0.0f,-1.0f), glm::vec3(0.0f,1.0f,0.0f));

		term.Clear(' ');
		//term.DrawTriangle(20, 9, 20, 9, 19, 27,'c');
		//std::cout << "DRAWING TRIANGLE WITH ROT: " << i << std::endl;
		//term.DrawTriangles(buff, 'x', projection * view * model);
		//term.DrawTriangles(buff3D, 'y', projection * view * model);
		term.DrawTriangles(buffCube,'a', projection * view * model);
		term.DrawTriangles(buffCube,'b', projection * view * model2);
		//std::cout << "DRAWN" << std::endl;
		//term.DrawQuad('r', model);
		term.DrawOverlay();
		term.Render();
		//term.PollEvents();
	}


	return 0;
}
